// lib/services/socket_service.dart
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:flutter/foundation.dart';
import 'package:get/get.dart'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
import '../model/notification_model.dart';

class SocketService {
  static final SocketService _instance = SocketService._internal();
  factory SocketService() => _instance;
  SocketService._internal();

  IO.Socket? _socket;
  final String _baseUrl = 'https://jobhubbackend-production-cc57.up.railway.app';
  
  // ‚úÖ ‡πÉ‡∏ä‡πâ RxBool ‡πÅ‡∏ó‡∏ô
  var isConnected = false.obs;
  
  // Callbacks
  Function(NotificationModel)? onNotificationReceived;
  Function(int)? onUnreadCountChanged;
  Function(String)? onNotificationRead;

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Socket
  void connect(String accessToken) {
    if (_socket != null && _socket!.connected) {
      debugPrint('Socket already connected');
      return;
    }

    try {
      _socket = IO.io(_baseUrl, <String, dynamic>{
        'transports': ['websocket'],
        'autoConnect': false,
        'auth': {
          'token': accessToken,
        },
      });

      _socket!.connect();

      // Event Listeners
      _socket!.onConnect((_) {
        debugPrint('‚úÖ Socket connected');
        isConnected.value = true; // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      });

      _socket!.onDisconnect((_) {
        debugPrint('‚ùå Socket disconnected');
        isConnected.value = false; // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      });

      _socket!.onConnectError((error) {
        debugPrint('‚ùå Socket connection error: $error');
        isConnected.value = false; // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      });

      _socket!.onError((error) {
        debugPrint('‚ùå Socket error: $error');
      });

      // ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
      _socket!.on('notification', (data) {
        debugPrint('üîî New notification received: $data');
        try {
          final notification = NotificationModel.fromJson(data);
          onNotificationReceived?.call(notification);
        } catch (e) {
          debugPrint('Error parsing notification: $e');
        }
      });

      // ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô
      _socket!.on('unread_count', (data) {
        debugPrint('üìä Unread count: $data');
        if (data is int) {
          onUnreadCountChanged?.call(data);
        } else if (data is Map && data.containsKey('count')) {
          onUnreadCountChanged?.call(data['count']);
        }
      });

      // ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      _socket!.on('mark_notification_read', (data) {
        debugPrint('‚úÖ Notification marked as read: $data');
        if (data is String) {
          onNotificationRead?.call(data);
        } else if (data is Map && data.containsKey('notificationId')) {
          onNotificationRead?.call(data['notificationId']);
        }
      });

    } catch (e) {
      debugPrint('‚ùå Error connecting socket: $e');
    }
  }

  // ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  void disconnect() {
    if (_socket != null) {
      _socket!.disconnect();
      _socket!.dispose();
      _socket = null;
      isConnected.value = false; // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      debugPrint('Socket disconnected and disposed');
    }
  }

  // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  void markAsRead(String notificationId) {
    if (_socket != null && _socket!.connected) {
      _socket!.emit('mark_notification_read', {'notificationId': notificationId});
    }
  }

  // ‡∏Ç‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô
  void requestUnreadCount() {
    if (_socket != null && _socket!.connected) {
      _socket!.emit('get_unread_count');
    }
  }
}