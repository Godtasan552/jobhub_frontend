// lib/services/notification_service.dart

import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:get_storage/get_storage.dart';
import 'package:http/http.dart' as http;
import '../model/notification_model.dart';

class NotificationService {
  final String baseUrl = dotenv.env['BASE_URL'] ?? 'http://localhost:3000';
  
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á GetStorage instance ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  GetStorage get _storage => GetStorage();

  // ‡∏î‡∏∂‡∏á Access Token
  String? _getAccessToken() {
    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'accessToken' ‡πÄ‡∏õ‡πá‡∏ô 'token' ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á
    final token = _storage.read('token');
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Token
    if (token != null) {
      print('üîë NotificationService - Token: EXISTS (${token.toString().length} chars)');
      print('   First 50 chars: ${token.toString().substring(0, token.toString().length > 50 ? 50 : token.toString().length)}');
    } else {
      print('‚ùå NotificationService - Token: NULL');
      // ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô storage
      final allKeys = _storage.getKeys();
      print('   Available keys in storage: $allKeys');
    }
    
    return token;
  }

  // Headers ‡∏û‡∏£‡πâ‡∏≠‡∏° Authorization
  Map<String, String> _getHeaders() {
    final token = _getAccessToken();
    return {
      'Content-Type': 'application/json',
      if (token != null) 'Authorization': 'Bearer $token',
    };
  }

  // 1. GET /api/v1/notifications ‚Äì ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<NotificationModel>> getNotifications() async {
    try {
      final url = Uri.parse('$baseUrl/api/v1/notifications');
      final headers = _getHeaders();
      
      print('üì© GET Notifications: $url');
      print('üìã Headers: ${headers.containsKey('Authorization') ? "Has Authorization" : "No Authorization"}');
      
      final response = await http.get(url, headers: headers);
      print('üì© Response Status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('üì¶ Raw API Response: $data');
        
        final List notifications = data['data'] ?? [];
        print('‚úÖ API returned ${notifications.length} notifications');
        
        if (notifications.isNotEmpty) {
          print('üìù First notification sample: ${notifications[0]}');
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Model
        final List<NotificationModel> notificationList = [];
        for (var i = 0; i < notifications.length; i++) {
          try {
            final notif = NotificationModel.fromJson(notifications[i]);
            notificationList.add(notif);
            print('   ‚úì Parsed notification $i: ${notif.title}');
          } catch (e) {
            print('   ‚ùå Failed to parse notification $i: $e');
            print('   Raw data: ${notifications[i]}');
          }
        }
        
        print('‚úÖ Successfully parsed ${notificationList.length}/${notifications.length} notifications');
        return notificationList;
      } else if (response.statusCode == 401) {
        print('‚ùå 401 Unauthorized - Token invalid or expired');
        print('   Response: ${response.body}');
        throw Exception('Unauthorized: Please login again');
      } else {
        print('‚ùå Error: ${response.statusCode} - ${response.body}');
        throw Exception('Failed to load notifications: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error getting notifications: $e');
      rethrow;
    }
  }

  // 2. GET /api/v1/notifications/unread-count ‚Äì ‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô
  Future<int> getUnreadCount() async {
    try {
      final url = Uri.parse('$baseUrl/api/v1/notifications/unread-count');
      final headers = _getHeaders();
      
      final response = await http.get(url, headers: headers);

      print('üî¢ GET Unread Count: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data['data']['unreadCount'] ?? 0;
      } else if (response.statusCode == 401) {
        print('‚ö†Ô∏è Unread count - 401 Unauthorized (skipping)');
        return 0;
      } else {
        return 0;
      }
    } catch (e) {
      print('‚ùå Error getting unread count: $e');
      return 0;
    }
  }

  // 3. POST /api/v1/notifications/mark-read ‚Äì ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  Future<bool> markAsRead(List<String> notificationIds) async {
    try {
      final url = Uri.parse('$baseUrl/api/v1/notifications/mark-read');
      final body = json.encode({'notificationIds': notificationIds});
      final headers = _getHeaders();

      final response = await http.post(
        url,
        headers: headers,
        body: body,
      );

      print('‚úÖ Mark as Read: ${response.statusCode}');

      if (response.statusCode == 200) {
        return true;
      } else {
        throw Exception('Failed to mark as read');
      }
    } catch (e) {
      print('‚ùå Error marking as read: $e');
      return false;
    }
  }

  // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  Future<bool> markSingleAsRead(String notificationId) async {
    return await markAsRead([notificationId]);
  }

  // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  Future<bool> markAllAsRead(List<NotificationModel> notifications) async {
    final unreadIds = notifications
        .where((n) => !n.read)
        .map((n) => n.id)
        .toList();
    
    if (unreadIds.isEmpty) return true;
    
    return await markAsRead(unreadIds);
  }

  // 4. DELETE /api/v1/notifications/:id ‚Äì ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<bool> deleteNotification(String notificationId) async {
    try {
      final url = Uri.parse('$baseUrl/api/v1/notifications/$notificationId');
      final headers = _getHeaders();
      
      final response = await http.delete(url, headers: headers);

      print('üóëÔ∏è Delete Notification: ${response.statusCode}');

      if (response.statusCode == 200) {
        return true;
      } else {
        throw Exception('Failed to delete notification');
      }
    } catch (e) {
      print('‚ùå Error deleting notification: $e');
      return false;
    }
  }
}